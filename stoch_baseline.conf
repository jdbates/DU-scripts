##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: Stochasty Baseline Autoconfiguration

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)
                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                core.show()
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                if gyro ~= nil then gyro.show() end

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end
                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()
    system:
        start:
            lua: |
                --init HUD
                require("Helpers")
                system.showScreen(1)
                --init control inputs
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0
                --enable attitude control and level craft on takeoff
                attitudeControl = true
                pitchControlFlag = true
                rollControlFlag = true
                targetRollValue = 0
                targetPitchValue = 0
                --function definitions
                function getRelativePitch(velocity) 
                    return math.deg(math.atan(velocity[2], velocity[3])) - 90
                end
                function getRelativeYaw(velocity) 
                    return math.deg(math.atan(velocity[2], velocity[1])) - 90
                end
                function updateHud()
                    local altitude = core.getAltitude()
                    local velocity = core.getVelocity()
                    local speed = vec3(velocity):len()
                    local worldV = vec3(core.getWorldVertical())
                    local constrF = vec3(core.getConstructWorldOrientationForward())
                    local constrR = vec3(core.getConstructWorldOrientationRight())
                    local constrV = vec3(core.getConstructWorldOrientationUp())
                    --local pitch = gyro.getPitch()
                    local pitch = 180 - getRoll(worldV, constrR, constrF)
                    --local roll = gyro.getRoll()
                    local roll = getRoll(worldV, constrF, constrR)
                    local bottomText = "ROLL"
                    local mode = 0
                    if (altitude == 0) then
                        mode = 1
                    else
                        mode = 0
                    end
                    if (mode == 1) then
                        if (speed > 5) then
                            pitch = getRelativePitch(velocity)
                            roll = getRelativeYaw(velocity)
                        else
                            pitch = 0
                            roll = 0
                        end
                        bottomText = "YAW"
                    end
                    content = [[
                    <head>
                        <style>
                            body {margin: 0}
                            svg {display:block; position:absolute; top:0; left:0} 
                            .majorLine {stroke:aqua;opacity:0.7;stroke-width:3;fill-opacity:0;}
                            .minorLine {stroke:aqua;opacity:0.3;stroke-width:3;fill-opacity:0;}
                            .text {fill:aqua;font-family:Montserrat;font-weight:bold}
                            #space {}
                            #ecu {}
                            #atmos {}    
                        </style>
                    </head>
                    <body>
                        <svg height="100%" width="100%" viewBox="0 0 1920 1080">
                            <g class="majorLine">
                                <line x1="939" y1="537" x2="957" y2="519"/>
                                <line x1="939" y1="543" x2="957" y2="561"/>
                                <line x1="981" y1="537" x2="963" y2="519"/>
                                <line x1="981" y1="543" x2="963" y2="561"/>
                                <line x1="932" y1="540" x2="945" y2="540"/>
                                <line x1="988" y1="540" x2="975" y2="540"/>
                                <line x1="960" y1="512" x2="960" y2="525"/>
                                <line x1="960" y1="568" x2="960" y2="555"/>
                                <g style="opacity:0.2">
                                    <line x1="920" y1="540" x2="840" y2="540"/>
                                    <line x1="1000" y1="540" x2="1080" y2="540"/>
                                    <line x1="960" y1="500" x2="960" y2="470"/>
                                    <line x1="960" y1="580" x2="960" y2="610"/>
                                </g>
                                <path d="M 700 0 L 740 35 Q 960 55 1180 35 L 1220 0"/>
                                <path d="M 792 550 L 785 550 L 785 650 L 792 650"/>
                            </g>
                            <g>
                                <polygon points="782,540 800,535 800,545" style="fill:rgb(42, 234, 248);opacity:0.7"/>
                                <polygon points="1138,540 1120,535 1120,545" style="fill:rgb(42, 234, 248);opacity:0.7"/>
                                <polygon points="960,725 955,707 965,707" style="fill:rgb(42, 234, 248);opacity:0.7"/>
                            </g>
                            <g class="text">
                                <g font-size=10>
                                    <text x="785" y="530" text-anchor="start">PITCH</text>
                                    <text x="1135" y="530" text-anchor="end">PITCH</text>
                                    <text x="960" y="688" text-anchor="middle">ROLL</text>
                                    <text x="790" y="660" text-anchor="start">THRL</text>
                                </g>
                                <g font-size=15>
                                    <text x="1020" y="33" text-anchor="middle" id="space">SPACE</text>
                                    <text x="900" y="33" text-anchor="middle" id="atmos">ATMOS</text>
                                    <text x="960" y="35" text-anchor="middle" id="ecu">ECU</text>
                                </g>
                            </g>]]
                    pitchC = math.floor(pitch)
                    for i = pitchC-25,pitchC+25 do
                        if (i%10==0) then
                            num = i
                            if (num > 180) then
                                num = -180 + 10*(i-18)
                            elseif (num < -170) then
                                num = 180 + 10*(i+18)
                            end
                            content = content..[[<g transform="translate(0 ]]..(-i*5 + pitch*5)..[[)">
                                <text x="745" y="540" style="fill:rgb(1, 165, 177);text-anchor:end;font-size:12;font-family:Montserrat;font-weight:bold">]]..num..[[</text>
                                <text x="1175" y="540" style="fill:rgb(1, 165, 177);text-anchor:start;font-size:12;font-family:Montserrat;font-weight:bold">]]..num..[[</text></g>]]
                        end
                        len = 5
                        if (i%10==0) then
                            len = 30
                        elseif (i%5==0) then
                            len = 15
                        end
                        content = content..[[
                        <g transform="translate(0 ]]..(-i*5 + pitch*5)..[[)">
                            <line x1="]]..(780-len)..[[" y1="540" x2="780" y2="540"style="stroke:rgb(1, 165, 177);opacity:0.3;stroke-width:3"/>
                            <line x1="]]..(1140+len)..[[" y1="540" x2="1140" y2="540"style="stroke:rgb(1, 165, 177);opacity:0.3;stroke-width:3"/></g>]]
                    end
                    rollC = math.floor(roll)
                    for i = rollC-35,rollC+35 do
                        if (i%10==0) then
                            num = math.abs(i)
                            if (num > 180) then
                                num = 180 + (180-num) 
                            end
                            content = content..[[<g transform="rotate(]]..(i - roll)..[[,960,460)">
                            <text x="960" y="760" style="fill:rgb(1, 165, 177);text-anchor:middle;font-size:12;font-family:Montserrat;font-weight:bold">]]..num..[[</text></g>]]
                        end
                        len = 5
                        if (i%10==0) then
                            len = 15
                        elseif (i%5==0) then
                            len = 10
                        end
                        content = content..[[<g transform="rotate(]]..(i - roll)..[[,960,460)">
                        <line x1="960" y1="730" x2="960" y2="]]..(730+len)..[[" style="stroke:rgb(1, 165, 177);opacity:0.3;stroke-width:2"/></g>]]
                    end
                    -- -unit.getThrottle()*0.97
                    content = content..[[<g transform="translate(0 ]]..(-50)..[[)">
                            <polygon points="788,650 800,647 800,653" style="fill:rgb(1, 165, 177);opacity:0.7"/>
                        </g>]]
                    content = content..[[
                        </svg>
                    </body>
                    ]]
                    system.setScreen(content)
                end
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = true --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local autoPitch = true --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoPitchFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)
                local currentPitchDeg = getRoll(worldVertical, constructRight, -constructForward)
                local currentPitchDegAbs = math.abs(currentPitchDeg)
                local currentPitchDegSign = utils.sign(currentPitchDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    
                    -- attitude control for roll
                    local rollSpeedThreshold = 0.01
                    local currentRollVelocity = constructAngularVelocity:project_on(constructForward):len()
                    if rollControlFlag == false and finalRollInput == 0 and currentRollVelocity < rollSpeedThreshold then
                        rollControlFlag = true
                        targetRollValue = currentRollDeg
                    end
                    local autoRollRollThreshold = 0.1
                    if attitudeControl == true and rollControlFlag == true and autoRoll == true and math.abs(targetRollValue-currentRollDeg) > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(targetRollValue, currentRollDeg-30, currentRollDeg+30);
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    
                    --attitude control for pitch
                    local pitchSpeedThreshold = 0.01
                    local currentPitchVelocity = constructAngularVelocity:project_on(constructRight):len()
                    if pitchControlFlag == false and finalPitchInput == 0 and currentPitchVelocity < pitchSpeedThreshold then
                        pitchControlFlag = true
                        targetPitchValue = currentPitchDeg
                    end
                    local autoPitchPitchThreshold = 0.1
                    if attitudeControl == true and pitchControlFlag == true and autoPitch == true and math.abs(targetPitchValue-currentPitchDeg) > autoPitchPitchThreshold and finalPitchInput == 0 then
                        local targetPitchDeg = utils.clamp(targetPitchValue, currentPitchDeg-30, currentRollDeg+30);
                        if (pitchPID == nil) then
                            pitchPID = pid.new(autoPitchFactor * 0.01, 0, autoPitchFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        pitchPID:inject(targetPitchDeg - currentPitchDeg)
                        local autoPitchInput = pitchPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoPitchInput * constructRight
                    end

                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')

        update:
            lua: |
                Nav:update()
                updateHud()
                
        stop:
            lua: system.showScreen(0)

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                    
                    --level out prior to landing
                    pitchControlFlag = true
                    rollControlFlag = true
                    targetRollValue = 0
                    targetPitchValue = 0
                else
                    Nav.control.retractLandingGears()
                end                

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [option1]
            lua: |
                --toggle attitude control
                attitudeControl = not attitudeControl
                if attitudeControl then
                    targetRollValue = -gyro.getRoll()
                    targetPitchValue = gyro.getPitch()
                end
                
        actionStart:
            args: [option2]
            lua: |
                --level craft
                pitchControlFlag = true
                rollControlFlag = true
                targetRollValue = 0
                targetPitchValue = 0
            
        actionStart:
            args: [forward]
            lua: |
                pitchInput = pitchInput - 1
                pitchControlFlag = false --wait until craft stabilizes, then reset targetPitchValue
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: |
                pitchInput = pitchInput + 1
                pitchControlFlag = false --wait until craft stabilizes, then reset targetPitchValue
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: |
                rollInput = rollInput - 1
                rollControlFlag = false --wait until craft stabilizes, then reset targetRollValue
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: |
                rollInput = rollInput + 1
                rollControlFlag = false --wait until craft stabilizes, then reset targetPitchValue
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)


        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                brakeInput = brakeInput + 1
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStop:
            args: [brake]
            lua: brakeInput = brakeInput - 1

        actionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)

        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [warp]
            lua: if warpdrive ~= nil then warpdrive.activateWarp() end